import java.time.Instant

plugins {
    id("java")
    id("jacoco")
    id("org.springframework.boot") version "3.0.5"
    id("io.spring.dependency-management") version "1.1.0"
    id("com.diffplug.spotless") version "6.17.0"
    id("com.google.cloud.tools.jib") version "3.3.1"
    id("com.gorylenko.gradle-git-properties") version "2.4.1"
    id("com.palantir.git-version") version "2.0.0"
    id("com.pasam.gradle.buildinfo") version "0.1.3"
    id("net.kyori.blossom") version "1.3.1"
    id("org.asciidoctor.convert") version "2.4.0"
    id("org.graalvm.buildtools.native") version "0.9.20"
    id("org.sonarqube") version "4.0.0.2929"
}

version = gitVersion()
group = "pcc.puppet.enforcer"
sourceCompatibility = "$javaVersion"

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set("snippetsDir", file("build/generated-snippets"))
    set("springCloudVersion", "2022.0.2")
}

dependencies {
    annotationProcessor ("org.projectlombok:lombok")
    annotationProcessor ("org.springframework.boot:spring-boot-configuration-processor")
    annotationProcessor ("org.mapstruct:mapstruct-processor:$mapstructProcessorVersion")
    implementation ("org.springframework.boot:spring-boot-starter-actuator")
    implementation ("org.springframework.boot:spring-boot-starter-cache")
    implementation ("org.springframework.boot:spring-boot-starter-data-r2dbc")
    implementation ("org.springframework.boot:spring-boot-starter-oauth2-client")
    implementation ("org.springframework.boot:spring-boot-starter-oauth2-resource-server")
    implementation ("org.springframework.boot:spring-boot-starter-security")
    implementation ("org.springframework.boot:spring-boot-starter-validation")
    implementation ("org.springframework.boot:spring-boot-starter-webflux")
    implementation ("org.springframework.cloud:spring-cloud-starter-circuitbreaker-reactor-resilience4j")
    implementation ("org.springframework.cloud:spring-cloud-starter-vault-config")
    implementation ("io.micrometer:micrometer-tracing-bridge-brave")
    implementation ("io.zipkin.reporter2:zipkin-reporter-brave")
    implementation ("org.flywaydb:flyway-core")
    implementation ("org.springframework:spring-jdbc")
    implementation ("io.r2dbc:r2dbc-pool:$r2dbcPoolVersion")
    implementation ("org.passay:passay:$passayVersion")
    implementation ("org.mapstruct:mapstruct:$mapstructProcessorVersion")
    implementation ("net.datafaker:datafaker:$datafakerVersion")
    implementation ("uk.co.jemos.podam:podam:$podamVersion")
    implementation ("com.github.f4b6a3:ulid-creator:5.1.0")
    compileOnly ("org.projectlombok:lombok")
    runtimeOnly ("io.micrometer:micrometer-registry-prometheus")
    runtimeOnly ("ch.qos.logback:logback-classic")
    runtimeOnly ("org.postgresql:postgresql")
    runtimeOnly ("org.postgresql:r2dbc-postgresql")
    runtimeOnly ("com.h2database:h2")
    runtimeOnly ("io.r2dbc:r2dbc-h2")
    testImplementation ("org.springframework.boot:spring-boot-starter-test")
    testImplementation ("io.projectreactor:reactor-test")
    testImplementation ("org.springframework.restdocs:spring-restdocs-mockmvc")
    testImplementation ("org.springframework.restdocs:spring-restdocs-webtestclient")
    testImplementation ("org.springframework.security:spring-security-test")
    testImplementation ("org.mockito:mockito-core")
    testImplementation ("org.awaitility:awaitility:$awaitilityVersion")

}

java {
    sourceCompatibility = JavaVersion.toVersion("$javaVersion")
    targetCompatibility = JavaVersion.toVersion("$javaVersion")
}

def details = versionDetails()
def dockerLabels = [
        "org.opencontainers.image.source": "https://github.com/PandinoCloudCrew/pcc-puppet-enforcer-realm",
        "org.opencontainers.image.version": "$project.version",
        "org.opencontainers.image.revision": details.gitHash,
        "org.opencontainers.image.vendor": "PandinoCloudCrew",
        "org.opencontainers.image.title": "$project.name",
        "org.opencontainers.image.license": "Apache-2.0",
        "org.opencontainers.image.created": Instant.now().toString()
]

tasks {
//    dockerBuild {
//        images = [
//                "${System.env.DOCKER_IMAGE ?: project.name}:$project.version",
//                "${System.env.DOCKER_IMAGE ?: project.name}:latest"
//        ]
//        labels = dockerLabels
//    }
//
//    dockerBuildNative {
//        images = [
//                "${System.env.DOCKER_IMAGE ?: project.name}-native:$project.version",
//                "${System.env.DOCKER_IMAGE ?: project.name}-native:latest"
//        ]
//        labels = dockerLabels
//    }
    tasks {
        jib {
            from {
                image = "openjdk:$javaVersion"
            }
            to {
                image = "${System.env.DOCKER_IMAGE ?: "gcr.io/myapp/$project.name"}:$project.version"
                tags = [version, "latest"] as List<String>

            }
        }
    }
}

spotless {
    java {
        importOrder()
        removeUnusedImports()
        googleJavaFormat() // has its own section below
        licenseHeader "/*\n" +
                " * Copyright 2022 Pandino Cloud Crew (C)\n" +
                " *\n" +
                " * Licensed under the Apache License, Version 2.0 (the \"License\");\n" +
                " * you may not use this file except in compliance with the License.\n" +
                " * You may obtain a copy of the License at\n" +
                " *\n" +
                " * https://www.apache.org/licenses/LICENSE-2.0\n" +
                " *\n" +
                " * Unless required by applicable law or agreed to in writing, software\n" +
                " * distributed under the License is distributed on an \"AS IS\" BASIS,\n" +
                " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n" +
                " * See the License for the specific language governing permissions and\n" +
                " * limitations under the License.\n" +
                " */" // or licenseHeaderFile
    }
}

sonarqube {
    properties {
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.language", "java"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.exclusions", ["**/*Application.java"]
        property "sonar.organization", "pandino-cloud-crew"
        property "sonar.projectName", "PandinoCloudCrew_$rootProject.name"
        property "sonar.projectKey", "$rootProject.name"
        property "sonar.java.binaries", "${buildDir}/classes"
        property "sonar.sourceEncoding", "UTF-8"
    }
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: ["Application.java"])
        }))
    }
}

blossom {
    def constants = "src/main/java/pcc/puppet/enforcer/app/Project.java"
    replaceToken("@VERSION@", project.version, constants)
    replaceToken("@NAME@", project.name, constants)
    def resources = "src/main/resources/application.yml"
    replaceToken("@VERSION@", project.version, resources)
    replaceToken("@NAME@", project.name, resources)
}

tasks.named("test") {
    outputs.dir snippetsDir
    useJUnitPlatform()
}

tasks.named("asciidoctor") {
    inputs.dir snippetsDir
    dependsOn test
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}
