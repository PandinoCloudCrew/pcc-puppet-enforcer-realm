import java.time.Instant

plugins {
    id("java")
    id("jacoco")
    id("org.springframework.boot") version "3.0.6"
    id("io.spring.dependency-management") version "1.1.0"
    id("com.diffplug.spotless") version "6.18.0"
    id("com.gorylenko.gradle-git-properties") version "2.4.1"
    id("com.palantir.git-version") version "3.0.0"
    id("com.pasam.gradle.buildinfo") version "0.1.3"
    id("net.kyori.blossom") version "1.3.1"
    id("org.asciidoctor.convert") version "2.4.0"
    id("org.sonarqube") version "4.0.0.2929"
    id("info.solidsoft.pitest") version "1.9.11"
}

version = gitVersion()
group = "pcc.puppet.enforcer"
sourceCompatibility = "$javaVersion"

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
        resources {
            srcDirs = ['src/main/resources']
        }
    }
    test {
        java {
            srcDirs = ['src/test/java']
        }
        resources {
            srcDirs = ['src/test/resources']
        }

    }
}

repositories {
    mavenCentral()
}

ext {
    set("snippetsDir", file("build/generated-snippets"))
    set("springCloudVersion", "2022.0.2")
}

dependencies {
    annotationProcessor("org.projectlombok:lombok")
    annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")
    annotationProcessor("org.mapstruct:mapstruct-processor:$mapstructProcessorVersion")
    implementation("org.springframework.boot:spring-boot-starter-aop")
    implementation("org.springframework.boot:spring-boot-starter-actuator")
    implementation("org.springframework.boot:spring-boot-starter-cache")
    implementation("org.springframework.boot:spring-boot-starter-data-mongodb-reactive")
    implementation("org.springframework.boot:spring-boot-starter-oauth2-client")
    implementation("org.springframework.boot:spring-boot-starter-oauth2-resource-server")
    implementation("org.springframework.boot:spring-boot-starter-security")
    implementation("org.springframework.boot:spring-boot-starter-validation")
    implementation("org.springframework.boot:spring-boot-starter-webflux")
    implementation("org.springframework.cloud:spring-cloud-starter-circuitbreaker-reactor-resilience4j")
    implementation("org.springframework.cloud:spring-cloud-starter-vault-config")
    implementation("io.micrometer:micrometer-tracing-bridge-otel")
    implementation("io.opentelemetry:opentelemetry-exporter-zipkin")
    implementation("org.springframework:spring-jdbc")
    implementation("org.passay:passay:$passayVersion")
    implementation("org.mapstruct:mapstruct:$mapstructProcessorVersion")
    implementation("net.datafaker:datafaker:$datafakerVersion")
    implementation("uk.co.jemos.podam:podam:$podamVersion")
    implementation("com.github.f4b6a3:ulid-creator:$ulidVersion")
    compileOnly("org.projectlombok:lombok")
    runtimeOnly("io.micrometer:micrometer-registry-prometheus")
    runtimeOnly("ch.qos.logback:logback-classic")
    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testImplementation("org.springframework.restdocs:spring-restdocs-mockmvc")
    testImplementation("org.springframework.restdocs:spring-restdocs-webtestclient")
    testImplementation("org.springframework.security:spring-security-test")
    testImplementation("io.projectreactor:reactor-test")
    testImplementation("org.mockito:mockito-core")
    testImplementation("org.awaitility:awaitility:$awaitilityVersion")
    testImplementation("org.testcontainers:junit-jupiter")
    testImplementation("org.testcontainers:mongodb")
    testImplementation("org.testcontainers:vault")

}

java {
    sourceCompatibility = JavaVersion.toVersion("$javaVersion")
    targetCompatibility = JavaVersion.toVersion("$javaVersion")
}

def details = versionDetails()

tasks {
    tasks {
        build {
            dependsOn "spotlessApply"
        }
        test {
            outputs.dir snippetsDir
            useJUnitPlatform()
        }
        asciidoctor {
            inputs.dir snippetsDir
            dependsOn "test"
        }
        bootBuildImage {
            imageName = "${System.env.DOCKER_IMAGE ?: "pcc.fyi/realm/$project.name"}"
            tags = [
                    "${System.env.DOCKER_IMAGE ?: "pcc.fyi/realm/$project.name"}:$project.version",
                    "${System.env.DOCKER_IMAGE ?: "pcc.fyi/realm/$project.name"}:latest"
            ]

            docker {
                publishRegistry {
                    username = "${System.env.REGISTRY_USERNAME ?: "default"}"
                    password = "${System.env.REGISTRY_PASSWORD ?: "default"}"
                    url = "${System.env.REGISTRY_URL ?: "pcc.fyi"}"
                }
            }

            environment = [
                    'BP_OCI_SOURCE'  : "https://github.com/PandinoCloudCrew/pcc-puppet-enforcer-realm",
                    'BP_OCI_VERSION' : "$project.version",
                    'BP_OCI_REVISION': details.gitHash,
                    'BP_OCI_VENDOR'  : "PandinoCloudCrew",
                    'BP_OCI_TITLE'   : "$project.name",
                    'BP_OCI_LICENSES': "Apache-2.0",
                    'BP_OCI_CREATED' : Instant.now().toString()
            ]
        }
    }
}

spotless {
    java {
        importOrder()
        removeUnusedImports()
        googleJavaFormat() // has its own section below
        licenseHeader "/*\n" +
                " * Copyright 2022 Pandino Cloud Crew (C)\n" +
                " *\n" +
                " * Licensed under the Apache License, Version 2.0 (the \"License\");\n" +
                " * you may not use this file except in compliance with the License.\n" +
                " * You may obtain a copy of the License at\n" +
                " *\n" +
                " * https://www.apache.org/licenses/LICENSE-2.0\n" +
                " *\n" +
                " * Unless required by applicable law or agreed to in writing, software\n" +
                " * distributed under the License is distributed on an \"AS IS\" BASIS,\n" +
                " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n" +
                " * See the License for the specific language governing permissions and\n" +
                " * limitations under the License.\n" +
                " */\n\n" // or licenseHeaderFile
    }
}

sonarqube {
    properties {
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.language", "java"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.exclusions", ["**/pcc/puppet/enforcer/app/**"]
        property "sonar.organization", "pandino-cloud-crew"
        property "sonar.projectName", "PandinoCloudCrew_$rootProject.name"
        property "sonar.projectKey", "$rootProject.name"
        property "sonar.java.binaries", "${buildDir}/classes"
        property "sonar.sourceEncoding", "UTF-8"
    }
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: ["pcc/puppet/enforcer/app/**"])
        }))
    }
}

pitest {
    testSourceSets = [sourceSets.test]
    mainSourceSets = [sourceSets.main]
    jvmArgs = ["-Xmx1024m"]
    useClasspathFile = true
    fileExtensionsToFilter.addAll('xml', 'orbit')
    junit5PluginVersion = "1.0.0"
    outputFormats = ["XML"]
    exportLineCoverage = true
    timestampedReports = true
}

blossom {
    def constants = "src/main/java/pcc/puppet/enforcer/app/Project.java"
    replaceToken("@VERSION@", project.version, constants)
    replaceToken("@NAME@", project.name, constants)
    def resources = "src/main/resources/application.yml"
    replaceToken("@VERSION@", project.version, resources)
    replaceToken("@NAME@", project.name, resources)
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:$springCloudVersion"
        mavenBom "org.testcontainers:testcontainers-bom:$testcontainersVersion"
    }
}
