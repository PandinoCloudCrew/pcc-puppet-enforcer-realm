import java.time.Instant

plugins {
    id("com.gorylenko.gradle-git-properties") version "2.4.1"
    id("com.pasam.gradle.buildinfo") version "0.1.3"
    id("com.github.johnrengelman.shadow") version "7.1.2"
    id("com.diffplug.spotless") version "6.15.0"
    id("io.micronaut.application") version "3.7.0"
    id("com.google.cloud.tools.jib") version "3.3.1"
    id("org.asciidoctor.jvm.convert") version "3.3.2"
//    id("io.micronaut.test-resources") version "3.5.3"
    id("com.palantir.git-version") version "1.0.0"
    id("org.sonarqube") version "3.5.0.2730"
    id("jacoco")
    id("net.kyori.blossom") version "1.3.1"
}

version = gitVersion()
group = "pcc.puppet.enforcer"

apply from: "gradle/asciidoc.gradle"
repositories {
    mavenCentral()
}

dependencies {
    annotationProcessor("org.projectlombok:lombok")
    annotationProcessor("io.micronaut.data:micronaut-data-processor")
    annotationProcessor("io.micronaut.openapi:micronaut-openapi")
    annotationProcessor("io.micronaut:micronaut-http-validation")
    annotationProcessor("io.micronaut.security:micronaut-security-annotations")
    annotationProcessor("io.micronaut.micrometer:micronaut-micrometer-annotation")
    annotationProcessor("org.mapstruct:mapstruct-processor:$mapstructProcessorVersion")
    implementation("com.agorapulse:micronaut-permissions:$micronautPermissionsVersion")
    implementation("com.agorapulse:micronaut-worker:$micronautWorkerVersion")
    implementation("io.micronaut:micronaut-validation")
    implementation("io.micronaut:micronaut-management")
    implementation("io.micronaut.micrometer:micronaut-micrometer-core")
    implementation("io.micronaut.micrometer:micronaut-micrometer-registry-prometheus")
    implementation("io.micronaut.cache:micronaut-cache-caffeine")
    implementation("io.micronaut.flyway:micronaut-flyway")
    implementation("io.micronaut.discovery:micronaut-discovery-client")
    implementation("io.micronaut.data:micronaut-data-r2dbc")
    implementation("io.r2dbc:r2dbc-pool:$r2dbcPoolVersion")
    implementation("jakarta.annotation:jakarta.annotation-api")
    implementation("io.micronaut.problem:micronaut-problem-json")
    implementation("io.micronaut.reactor:micronaut-reactor")
    implementation("io.micronaut.reactor:micronaut-reactor-http-client")
    implementation("com.github.0xshamil:java-xid:1.0.0")
    implementation("io.micronaut:micronaut-http-client")
    implementation("io.micronaut:micronaut-jackson-databind")
    implementation("io.micronaut.security:micronaut-security")
    implementation("io.micronaut.security:micronaut-security-jwt")
    implementation("io.micronaut.security:micronaut-security-oauth2")
    implementation("io.micronaut.tracing:micronaut-tracing-jaeger")
    implementation("io.swagger.core.v3:swagger-annotations")
    implementation("org.passay:passay:$passayVersion")
    implementation("org.mapstruct:mapstruct:$mapstructProcessorVersion")
    implementation("net.datafaker:datafaker:$datafakerVersion")
    implementation("uk.co.jemos.podam:podam:$podamVersion")
    runtimeOnly("ch.qos.logback:logback-classic")
    runtimeOnly("org.postgresql:postgresql")
    runtimeOnly("org.postgresql:r2dbc-postgresql")
    compileOnly("org.projectlombok:lombok")
    compileOnly("org.graalvm.nativeimage:svm")

    testImplementation("org.mockito:mockito-core")
    testImplementation("org.awaitility:awaitility:$awaitilityVersion")
    runtimeOnly("com.h2database:h2")
    runtimeOnly("io.r2dbc:r2dbc-h2")

}

application {
    mainClass.set("pcc.puppet.enforcer.app.Application")
}

java {
    sourceCompatibility = JavaVersion.toVersion("$javaVersion")
    targetCompatibility = JavaVersion.toVersion("$javaVersion")
}

def details = versionDetails()
def dockerLabels = [
        "org.opencontainers.image.source": "https://github.com/PandinoCloudCrew/pcc-puppet-enforcer-realm",
        "org.opencontainers.image.version": "$project.version",
        "org.opencontainers.image.revision": details.gitHash,
        "org.opencontainers.image.vendor": "PandinoCloudCrew",
        "org.opencontainers.image.title": "$project.name",
        "org.opencontainers.image.license": "Apache-2.0",
        "org.opencontainers.image.created": Instant.now().toString()
]

tasks {
    dockerBuild {
        images = [
                "${System.env.DOCKER_IMAGE ?: project.name}:$project.version",
                "${System.env.DOCKER_IMAGE ?: project.name}:latest"
        ]
        labels = dockerLabels
    }

    dockerBuildNative {
        images = [
                "${System.env.DOCKER_IMAGE ?: project.name}-native:$project.version",
                "${System.env.DOCKER_IMAGE ?: project.name}-native:latest"
        ]
        labels = dockerLabels
    }
    jib {
        from {
            image = "openjdk:$javaVersion"
        }
        to {
            image = "${System.env.DOCKER_IMAGE ?: 'gcr.io/myapp/jib-image'}:$project.version"
        }
    }
}

graalvmNative.toolchainDetection = false
micronaut {
    runtime("netty")
    testRuntime("junit5")
    processing {
        incremental(true)
        annotations("pcc.puppet.enforcer.*")
    }
}

spotless {
    java {
        importOrder()
        removeUnusedImports()
        googleJavaFormat() // has its own section below
        licenseHeader "/*\n" +
                " * Copyright 2022 Pandino Cloud Crew (C)\n" +
                " *\n" +
                " * Licensed under the Apache License, Version 2.0 (the \"License\");\n" +
                " * you may not use this file except in compliance with the License.\n" +
                " * You may obtain a copy of the License at\n" +
                " *\n" +
                " * https://www.apache.org/licenses/LICENSE-2.0\n" +
                " *\n" +
                " * Unless required by applicable law or agreed to in writing, software\n" +
                " * distributed under the License is distributed on an \"AS IS\" BASIS,\n" +
                " * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n" +
                " * See the License for the specific language governing permissions and\n" +
                " * limitations under the License.\n" +
                " */" // or licenseHeaderFile
    }
}

sonarqube {
    properties {
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.language", "java"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.exclusions", ["**/*Application.java"]
        property "sonar.organization", "pandino-cloud-crew"
        property "sonar.projectName", "PandinoCloudCrew_$rootProject.name"
        property "sonar.projectKey", "$rootProject.name"
        property "sonar.java.binaries", "${buildDir}/classes"
        property "sonar.sourceEncoding", "UTF-8"
    }
}

jacocoTestReport {
    reports {
        xml.enabled = true
        html.enabled = true
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it,
                    exclude: ["Application.java"])
        }))
    }
}

blossom {
    def constants = "src/main/java/pcc/puppet/enforcer/app/Project.java"
    replaceToken("@VERSION@", project.version, constants)
    replaceToken("@NAME@", project.name, constants)
    def resources = "src/main/resources/application.yml"
    replaceToken("@VERSION@", project.version, resources)
    replaceToken("@NAME@", project.name, resources)
}
